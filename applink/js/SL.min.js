/**
 * 全局对象基类
 * @class 全局方法
 */
var SL = {

    /**
     * 合并多个对象
     * @method merge
     * @param obj {Object} 要合并到的对象
     * @param [...objects] {Object} 提供属性的其他对象
     */
    merge: function (obj) {
        if (obj == undefined) {
            obj = {};
        }
        for (var i = 1; i < arguments.length; i++) {
            if (arguments[i] == undefined) continue;
            for (var name in arguments[i]) {
                if (arguments[i][name] == undefined) continue;
                obj[name] = arguments[i][name];
            }
        }
        return obj;
    },

    /**
     * 请求生成下一帧画面所需要调用的方法
     * @static
     * @method requestAnimationFrame
     * @param func {function} 要调用的方法
     */
    requestAnimationFrame: function (func) {
        var f = (window.requestAnimationFrame
        || window.webkitRequestAnimationFrame
        || window.mozRequestAnimationFrame
        || window.oRequestAnimationFrame
        || window.msRequestAnimationFrame
        || function (handler) {
            setTimeout(handler, 1000 / 60)
        }).bind(window);
        f(func);
    },

    getValueByBrowser: function (obj, property) {
        var prefixs = ['webkit', 'moz', 'o', 'ms'];
        for (var i = 0; i < prefixs.length; i++) {
            var pname = prefixs[i] + property.substr(0, 1).toUpperCase() + property.substr(1);
            if (obj[pname] !== undefined) {
                return obj[pname];
            }
        }
        return obj[property];
    },

    setValueByBrowser: function (obj, property, value) {
        var prefixs = ['webkit', 'moz', 'o', 'ms'];
        for (var i = 0; i < prefixs.length; i++) {
            var pname = prefixs[i] + property.substr(0, 1).toUpperCase() + property.substr(1);
            if (obj[pname] !== undefined) {
                obj[pname] = value;
                return;
            }
        }
        obj[property] = value;
    },

    bindTransitionEnd: function (element, propertyName, func) {
        var callback = function (evt) {
            if (evt.target == element && evt.propertyName == propertyName) {
                func();
            }
        };
        if (window.onwebkttransitionend != undefined) {
            window.addEventListener('webkitTransitionEnd', callback);
        }
        else {
            window.addEventListener('transitionend', callback);
        }
    },

    /**
     * 获取一个唯一ID
     * @method uniqid
     * @static
     * @returns {string} 唯一ID
     */
    uniqid: function () {
        return (SL._uniqid++).toString();
    },

    _uniqid: 1,

    /**
     * 加载图片
     * @method loadImage
     * @param list {Array} 要加载的图片列表
     * 列表元素格式为：{name: '名称', url: '图片地址'}
     * @param onComplete {Function} 当加载完成时调用的回调方法
     * @param onProgress {Function} 当加载进度变更时调用的回调方法
     * @static
     */
    loadImage: function (list, onComplete, onProgress) {
        var loader = {
            onComplete: onComplete,
            onProgress: onProgress,
            isComplete: false
        };

        if (typeof (list) == 'object' && list.constructor == Array) {
            //加载一个数组
            loader.type = 'list';
            loader.images = [];
            for (var i = 0; i < list.length; i++) {
                var item = {
                    name: list[i].name,
                    image: new Image()
                };
                item.image.addEventListener('load', function () {
                    var complete = 0;
                    for (var i = 0; i < loader.images.length; i++) {
                        if (loader.images[i].image.complete) {
                            complete++;
                        }
                    }

                    if (loader.onProgress) {
                        loader.onProgress(Math.floor(complete * 100 / loader.images.length));
                    }
                    if (complete >= loader.images.length) {
                        if (loader.isComplete) return;
                        loader.isComplete = true;
                        var result = {};

                        for (var i = 0; i < loader.images.length; i++) {
                            result[loader.images[i].name] = loader.images[i].image;
                        }
                        if (loader.onComplete) {
                            loader.onComplete(result);
                            if (loader.onProgress) {
                                delete loader.onProgress;
                            }
                            delete loader.onComplete;
                        }
                    }
                });
                item.image.addEventListener('error', function (evt) {
                    var src = evt.target.src;
                    evt.target.src = "";
                    evt.target.src = src;
                });
                loader.images.push(item);

            }
            for (var i = 0; i < list.length; i++) {
                loader.images[i].image.src = list[i].url;
            }
        }
        else if (typeof (list) == 'string') {
            //加载单个图片地址
            loader.type = 'image';
            loader.image = new Image();
            loader.image.addEventListener('load', function (evt) {
                if (loader.onComplete) {
                    loader.onComplete(loader.image);
                }
            });
            loader.image.addEventListener('error', function (evt) {
                var src = evt.target.src;
                evt.target.src = "";
                evt.target.src = src;
            });
            loader.image.src = list;
        }
    },

    checkImage: function (list, onComplete, onProgress) {
        var loader = {
            onComplete: onComplete,
            onProgress: onProgress,
            isComplete: false,
            list: list
        };

        var check = function (images) {
            var p = 0;
            for (var i = 0; i < images.length; i++) {
                if (images[i].complete) {
                    p++;
                }
            }
            return p / images.length;
        };

        if (check(list) == 1) {
            if (onComplete) {
                onComplete();
            }
        }
        else {
            for (var i = 0; i < list.length; i++) {
                list[i].addEventListener('load', (function () {
                    var p = check(this.list);
                    if (p == 1 && !this.isComplete) {
                        if (this.onComplete) {
                            this.onComplete();
                        }
                    }
                    else {
                        if (this.onProgress) {
                            this.onProgress(Math.floor(p * 100));
                        }
                    }
                }).bind(loader));
            }
        }
    }
};

if (Function.prototype.bind == undefined) {
    Function.prototype.bind = function () {
        var fn = this, args = Array.prototype.slice.call(arguments), object = args.shift();
        return function () {
            return fn.apply(object,
                args.concat(Array.prototype.slice.call(arguments)));
        };
    };
}
/**
 * 样式表管理器
 * @static
 * @class StyleManager
 */
SL.StyleManager = {};

SL.StyleManager.stylesheet = null;

/**
 * 获取当前使用的临时样式表对象
 * @static
 * @protected
 * @method getStylesheet
 * @return {CSSStylesheet} 临时样式表对象
 */
SL.StyleManager.getStylesheet = function () {
    if (SL.StyleManager.stylesheet == null) {
        var node = document.createElement('style');
        node.type = 'text/css';
        document.head.appendChild(node);
        SL.StyleManager.stylesheet = node.sheet;
    }
    return SL.StyleManager.stylesheet;
};

/**
 * 添加一条CSS规则
 * @method addCssRule
 * @static
 * @param selector {string} 选择器名称
 * @param text {string} CSS文本
 * @returns {CSSRule} 被添加的CSS规则对象
 */
SL.StyleManager.addRule = function (selector, text) {
    var sheet = SL.StyleManager.getStylesheet();
    if (sheet.insertRule) {
        sheet.insertRule(selector + ' {' + text + '}', 0);
        return sheet.cssRules[0];
    }
    else {
        sheet.addRule(selector, text);
        return sheet.cssRules[sheet.cssRules.length - 1];
    }
};

/**
 * 移除一条CSS规则
 * @method  removeRule
 * @param rule {CSSRule} 要移除的CSS规则
 */
SL.StyleManager.removeRule = function (rule) {
    var sheet = SL.StyleManager.getStylesheet();
    for (var i = 0; i < sheet.cssRules.length; i++) {
        if (rule.parentStyleSheet.cssRules[i] == rule) {
            rule.parentStyleSheet.deleteRule(i);
            return;
        }
    }
};
/**
 * 
 */
SL.Events = {
    RESIZE: 'resize',

    RESET: 'reset',

    ACTIVE: 'active',

    DEACTIVE: 'deactive',

    NAVIGATE_START: 'navigate_start',

    NAVIGATE_END: 'navigate_end',

    CHANGE: 'change'
};

/**
* 拥有事件触发能力的对象基类
* @class EventDispatcher
* @constructor
*/
SL.EventDispatcher = function () {
    this.events = {};

    /**
     * 添加一个事件处理方法
     * @method addEventListener
     * @param type {String} 事件类型
     * @param listener {Function} 事件处理方法
     */
    this.addEventListener = function (type, listener) {
        if (this.events[type] == undefined) {
            this.events[type] = [];
        }
        this.removeEventListener(type, listener);
        this.events[type].push(listener);
    };

    /**
     * 移除一个事件处理方法
     * @method removeEventListener
     * @param type {String}事件类型
     * @param listener {Function} 事件处理方法
     */
    this.removeEventListener = function (type, listener) {
        if (this.events[type] == undefined) {
            return;
        }
        var index = -1;
        if ((index = this.events[type].indexOf(listener)) != -1) {
            this.events[type].splice(index, 1);
        }
    };

    /**
     * 触发一个事件
     * @method dispatchEvent
     * @param event {Object} 事件参数
     */
    this.dispatchEvent = function (event) {
        if (this.events[event.type] == undefined) {
            return;
        }
        for (var i = 0; i < this.events[event.type].length; i++) {
            this.events[event.type][i].call(this, event);
        }
    };
};